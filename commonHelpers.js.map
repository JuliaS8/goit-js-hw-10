{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import iziToast from 'izitoast';\n// import 'izitoast/dist/css/iziToast.min.css';\n\n// const refs = {\n//   startBtn: document.querySelector('[data-start]'),\n//   days: document.querySelector('[data-days]'),\n//   hours: document.querySelector('[data-hours]'),\n//   minutes: document.querySelector('[data-minutes]'),\n//   seconds: document.querySelector('[data-seconds]'),\n// };\n\n// let userSelectedDate;\n// let intervalId;\n\n// if (refs.startBtn) {\n//   refs.startBtn.disabled = true;\n\n//   refs.startBtn.addEventListener('click', () => {\n//     intervalId = setInterval(updateClockface, 1000);\n//     refs.startBtn.disabled = true;\n//     document.querySelector('#datetime-picker').disabled = true;\n//   });\n// } else {\n//   console.error('Start button not found');\n// }\n\n// function updateClockface() {\n//   const now = new Date();\n//   const timeDifference = userSelectedDate - now;\n\n//   if (timeDifference <= 0) {\n//     clearInterval(intervalId);\n//     displayTime({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n//     document.querySelector('#datetime-picker').disabled = false;\n//     return;\n//   }\n\n//   const time = convertMs(timeDifference);\n//   displayTime(time);\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function displayTime({ days, hours, minutes, seconds }) {\n//   refs.days.textContent = String(days).padStart(2, '0');\n//   refs.hours.textContent = String(hours).padStart(2, '0');\n//   refs.minutes.textContent = String(minutes).padStart(2, '0');\n//   refs.seconds.textContent = String(seconds).padStart(2, '0');\n// }\n\n// flatpickr('#datetime-picker', {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     const now = new Date();\n//     if (selectedDates[0] <= now) {\n//       showErrorMessage('Please choose a date in the future');\n//       refs.startBtn.disabled = true;\n//     } else {\n//       iziToast.hide({}, document.querySelector('.iziToast'));\n//       refs.startBtn.disabled = false;\n//       userSelectedDate = selectedDates[0];\n//     }\n//   },\n// });\n\n// async function showErrorMessage(message) {\n//   try {\n//     const svgIcon = await loadSvgIcon('./img/icon-error.svg');\n//     const errorHtml = `\n//       <div style=\"display: flex; align-items: center; color: white;\">\n//         <div style=\"margin-right: 10px; width: 24px; height: 24px;\">\n//           ${svgIcon}\n//         </div>\n//         <span style=\"font-weight: bold; margin-right: 10px;\"></span>\n//         <span>${message}</span>\n//       </div>\n//     `;\n//     iziToast.error({\n//       title: '',\n//       message: errorHtml,\n//       position: 'topRight',\n//       timeout: 5000,\n//       titleColor: 'white',\n//       messageColor: 'white',\n//       backgroundColor: '#EF4040',\n//       icon: false,\n//       theme: 'dark',\n//     });\n//   } catch (error) {\n//     console.error('Error loading SVG icon:', error);\n//   }\n// }\n\n// async function loadSvgIcon(path) {\n//   const response = await fetch(path);\n//   if (!response.ok) {\n//     throw new Error(`Failed to load SVG icon: ${response.statusText}`);\n//   }\n//   return await response.text();\n// }\n\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst refs = {\n  startBtn: document.querySelector('[data-start]'),\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\n\nlet userSelectedDate;\nlet intervalId;\n\nif (refs.startBtn) {\n  refs.startBtn.disabled = true;\n\n  refs.startBtn.addEventListener('click', () => {\n    intervalId = setInterval(updateClockface, 1000);\n    refs.startBtn.disabled = true;\n    document.querySelector('#datetime-picker').disabled = true;\n  });\n} else {\n  console.error('Start button not found');\n}\n\nfunction updateClockface() {\n  const now = new Date();\n  const timeDifference = userSelectedDate - now;\n\n  if (timeDifference <= 0) {\n    clearInterval(intervalId);\n    displayTime({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n    document.querySelector('#datetime-picker').disabled = false;\n    return;\n  }\n\n  const time = convertMs(timeDifference);\n  displayTime(time);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction displayTime({ days, hours, minutes, seconds }) {\n  refs.days.textContent = String(days).padStart(2, '0');\n  refs.hours.textContent = String(hours).padStart(2, '0');\n  refs.minutes.textContent = String(minutes).padStart(2, '0');\n  refs.seconds.textContent = String(seconds).padStart(2, '0');\n}\n\nflatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const now = new Date();\n    if (selectedDates[0] <= now) {\n      showErrorMessage('Please choose a date in the future');\n      refs.startBtn.disabled = true;\n    } else {\n      const iziToastElement = document.querySelector('.iziToast');\n      if (iziToastElement) {\n        iziToast.hide({}, iziToastElement);\n      }\n      refs.startBtn.disabled = false;\n      userSelectedDate = selectedDates[0];\n    }\n  },\n});\n\nasync function showErrorMessage(message) {\n  try {\n    const svgIcon = await loadSvgIcon('./img/icon-error.svg');\n    const errorHtml = `\n      <div style=\"display: flex; align-items: center; color: white;\">\n        <div style=\"margin-right: 10px; width: 24px; height: 24px;\">\n          ${svgIcon}\n        </div>\n        <span style=\"font-weight: bold; margin-right: 10px;\"></span>\n        <span>${message}</span>\n      </div>\n    `;\n    iziToast.error({\n      title: '',\n      message: errorHtml,\n      position: 'topRight',\n      timeout: 5000,\n      titleColor: 'white',\n      messageColor: 'white',\n      backgroundColor: '#EF4040',\n      icon: false,\n      theme: 'dark',\n    });\n  } catch (error) {\n    console.error('Error loading SVG icon:', error);\n  }\n}\n\nasync function loadSvgIcon(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(`Failed to load SVG icon: ${response.statusText}`);\n  }\n  return await response.text();\n}\n"],"names":["refs","userSelectedDate","intervalId","updateClockface","timeDifference","displayTime","time","convertMs","ms","days","hours","minutes","seconds","flatpickr","selectedDates","now","showErrorMessage","iziToastElement","iziToast","message","errorHtml","loadSvgIcon","error","path","response"],"mappings":"2GA2HA,MAAMA,EAAO,CACX,SAAU,SAAS,cAAc,cAAc,EAC/C,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAEA,IAAIC,EACAC,EAEAF,EAAK,UACPA,EAAK,SAAS,SAAW,GAEzBA,EAAK,SAAS,iBAAiB,QAAS,IAAM,CAC5CE,EAAa,YAAYC,EAAiB,GAAI,EAC9CH,EAAK,SAAS,SAAW,GACzB,SAAS,cAAc,kBAAkB,EAAE,SAAW,EAC1D,CAAG,GAED,QAAQ,MAAM,wBAAwB,EAGxC,SAASG,GAAkB,CAEzB,MAAMC,EAAiBH,EADX,IAAI,KAGhB,GAAIG,GAAkB,EAAG,CACvB,cAAcF,CAAU,EACxBG,EAAY,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EACzD,SAAS,cAAc,kBAAkB,EAAE,SAAW,GACtD,MACD,CAED,MAAMC,EAAOC,EAAUH,CAAc,EACrCC,EAAYC,CAAI,CAClB,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASP,EAAY,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDZ,EAAK,KAAK,YAAc,OAAOS,CAAI,EAAE,SAAS,EAAG,GAAG,EACpDT,EAAK,MAAM,YAAc,OAAOU,CAAK,EAAE,SAAS,EAAG,GAAG,EACtDV,EAAK,QAAQ,YAAc,OAAOW,CAAO,EAAE,SAAS,EAAG,GAAG,EAC1DX,EAAK,QAAQ,YAAc,OAAOY,CAAO,EAAE,SAAS,EAAG,GAAG,CAC5D,CAEAC,EAAU,mBAAoB,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAM,IAAI,KAChB,GAAID,EAAc,CAAC,GAAKC,EACtBC,EAAiB,oCAAoC,EACrDhB,EAAK,SAAS,SAAW,OACpB,CACL,MAAMiB,EAAkB,SAAS,cAAc,WAAW,EACtDA,GACFC,EAAS,KAAK,GAAID,CAAe,EAEnCjB,EAAK,SAAS,SAAW,GACzBC,EAAmBa,EAAc,CAAC,CACnC,CACF,CACH,CAAC,EAED,eAAeE,EAAiBG,EAAS,CACvC,GAAI,CAEF,MAAMC,EAAY;AAAA;AAAA;AAAA,YADF,MAAMC,EAAY,sBAAsB,CAIzC;AAAA;AAAA;AAAA,gBAGHF,CAAO;AAAA;AAAA,MAGnBD,EAAS,MAAM,CACb,MAAO,GACP,QAASE,EACT,SAAU,WACV,QAAS,IACT,WAAY,QACZ,aAAc,QACd,gBAAiB,UACjB,KAAM,GACN,MAAO,MACb,CAAK,CACF,OAAQE,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,CAC/C,CACH,CAEA,eAAeD,EAAYE,EAAM,CAC/B,MAAMC,EAAW,MAAM,MAAMD,CAAI,EACjC,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,4BAA4BA,EAAS,UAAU,EAAE,EAEnE,OAAO,MAAMA,EAAS,MACxB"}